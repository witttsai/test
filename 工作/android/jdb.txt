jdb在user.home目录下寻找jdb.ini作为启动文件
需要先打开ddms
jdb -J-Duser.home=. -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8700
新版ddms没有bug按钮，可以用am start -D 启动进入调试模式
adb shell am start -D -n %APK_PACKAGE%/.%APK_ACTIVITY%		//带debug启动

==================================================================
=== 栈
==================================================================
wherei [<线程 ID> | all] -- 转储线程的堆栈以及 pc 信息
up [n 帧]             -- 向上移动线程的堆栈
down [n 帧]           -- 向下移动线程的堆栈

==================================================================
=== 断点
==================================================================
stop in <类 ID>.<方法>[(参数类型,...)] -- 在方法中设置断点
stop at <类 ID>:<行> -- 在行中设置断点
clear                     -- 列出断点

==================================================================
=== 执行
==================================================================
step                      -- 执行当前行
step up                   -- 执行到当前方法返回其调用方
stepi                     -- 执行当前指令
next                      -- 跳过一行（跨过调用）
cont                      -- 从断点处继续执行

==================================================================
=== 监视
==================================================================
watch [access|all] <类 ID>.<字段名>    -- 监视对字段的访问/修改
unwatch [access|all] <类 ID>.<字段名>    -- 停止监视对字段的访问/修改
trace [go] methods [thread]    -- 跟踪方法的进入和退出。-- 除非指定 'go'，否则所有线程都将暂停
trace [go] method exit | exits [thread]    -- 跟踪当前方法的退出或所有方法的退出-- 除非指定 'go'，否则所有线程都将暂停
untrace [方法]         -- 停止跟踪方法的进入和/或退出

==================================================================
=== 打印
==================================================================
print <表达式>              -- 输出表达式的值
dump <表达式>               -- 输出所有对象信息
locals                    -- 输出当前堆栈帧中的所有本地变量



==================================================================
=== 其他
==================================================================
list [line number|method] -- 输出源代码
use（或 sourcepath）[源文件路径]    -- 显示或更改源路径,用/分隔
read <文件名>           -- 读取并执行某个命令文件

monitor <命令>         -- 每次程序停止时执行命令
monitor                   -- 列出监视器
unmonitor <监视器号>      -- 删除某个监视器

!!                        -- 重复执行最后一个命令
<n> <命令>             -- 将命令重复执行 n 次
# <命令>               -- 放弃（不执行）

classes                   -- 列出当前已知的类
class <类 ID>          -- 显示已命名类的详细信息
methods <类 ID>        -- 列出类的方法
fields <类 ID>         -- 列出类的字段

interrupt <线程 ID>     -- 中断线程

